name: Batch Builder Template

on:
  workflow_call:
    inputs:
      batch_number:
        description: The batch number for the build batch script
        required: true
        type: string
    secrets:
      GH_TOKEN:
        required: true

env:
  REGISTRY: ghcr.io
  GHCR_URI: ghcr.io/${{ github.repository }}

permissions:
  contents: read
  packages: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Free up disk space
        uses: jlumbroso/free-disk-space@main
        with:
          # this might remove tools that are actually needed,
          # if set to "true" but frees about 6 GB
          tool-cache: true

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up nix
        uses: cachix/install-nix-action@v27
        with:
          nix_path: nixpkgs=channel:nixos-24.05
          github_access_token: ${{ secrets.GH_TOKEN }}

      - name: Nix build
        run: |
          chmod +x ./scripts/build_batch_${{ inputs.batch_number }}.sh
          ./scripts/build_batch_${{ inputs.batch_number }}.sh

      - name: Load images
        run: |
          chmod +x ./load_all.sh
          ./load_all.sh

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GH_TOKEN }}

      - name: Set images for metadata
        run: |
          set -e

          images_list=""

          images=$(docker images --format "{{.Repository}}:{{.Tag}}" | grep '^rce/' || true)

          if [[ -z "${images}" ]]; then
            echo "No images found with the 'rce/' prefix."
            exit 1
          fi

          while IFS= read -r image; do
            image=$(echo "${image}" | sed "s/^rce\///")

            if [[ "${image}" == *":latest" ]]; then
              image=$(echo "${image}" | sed "s/:latest$//")
            fi

            formatted_uri="${{ env.GHCR_URI }}-${image}"

            images_list+="${formatted_uri} "

          done <<< "${images}"

          echo "IMAGES_LIST=${images_list}" >> $GITHUB_ENV

      - name: Set up metadata for the images
        id: metadata
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGES_LIST }}
          flavor: |
            latest=true
          tags: |
            type=edge
            type=sha

      - name: Tag images
        run: |
          set -e

          images=$(docker images --format "{{.Repository}}:{{.Tag}}" | grep '^rce/' || true)

          tags="${{ steps.metadata.outputs.tags }}"
          tags_list=$(echo "${tags}" | tr '\n' ' ' | tr -d '\r')

          for image in ${images}; do
            for tag in ${tags_list}; do
              echo "Tagging ${image} with ${tag}..."
              docker tag "${image}" "${tag}"
            done
          done

          echo "TAGS_LIST=${tags_list}" >> $GITHUB_ENV

      - name: Push images
        run: |
          set -e

          for image in ${{ env.TAGS_LIST }}; do
            echo "Pushing ${image}..."
            docker push "${image}"
          done

      - name: Set Package Visibility to Public
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          set -eo pipefail

          log() {
            echo "$(date '+%Y-%m-%d %H:%M:%S') - $1"
          }

          extract_package_name() {
            echo "$1" | sed 's|ghcr.io/[^/]*/||'
          }

          extract_tag() {
            echo "$1" | cut -d':' -f2
          }

          is_valid_package_name() {
            [[ "$1" =~ ^[a-z0-9.-]+$ ]]
          }

          get_package_version_id() {
            local package_name="$1"
            local tag="$2"
            gh api -H "Accept: application/vnd.github+json" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              "/user/packages/container/${package_name}/versions" \
              --jq ".[] | select(.metadata.container.tags[] | contains(\"${tag}\")) | .id" \
              | tr -d '\n'
          }

          is_already_public() {
            local package_name="$1"
            local version_id="$2"
            visibility=$(gh api -H "Accept: application/vnd.github+json" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              "/user/packages/container/${package_name}/versions/${version_id}" \
              --jq '.visibility')
            [[ "$visibility" == "public" ]]
          }

          set_package_to_public() {
            local package_name="$1"
            local version_id="$2"
            gh api --method PATCH \
              -H "Accept: application/vnd.github+json" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              "/user/packages/container/${package_name}/versions/${version_id}" \
              -f visibility='public'
          }

          retry_with_backoff() {
            local max_attempts=5
            local attempt=1
            local delay=5

            while [[ $attempt -le $max_attempts ]]; do
              if "$@"; then
                return 0
              fi
              log "Attempt $attempt failed. Retrying in $delay seconds..."
              sleep $delay
              attempt=$((attempt + 1))
              delay=$((delay * 2))
            done

            log "All $max_attempts attempts failed."
            return 1
          }

          set_package_visibility_to_public() {
            local pushed_images=($TAGS_LIST)

            if [[ ${#pushed_images[@]} -eq 0 ]]; then
              log "No images to process"
              return 0
            fi

            for image in "${pushed_images[@]}"; do
              log "Processing image: $image"

              package_name=$(extract_package_name "$image")
              tag=$(extract_tag "$image")

              if ! is_valid_package_name "$package_name"; then
                log "Invalid package name: $package_name"
                continue
              fi

              version_id=$(get_package_version_id "$package_name" "$tag")

              if [[ -z "$version_id" ]]; then
                log "Package version not found: $package_name:$tag"
                continue
              fi

              if is_already_public "$package_name" "$version_id"; then
                log "Package already public: $package_name:$tag"
                continue
              fi

              if retry_with_backoff set_package_to_public "$package_name" "$version_id"; then
                log "Successfully set $package_name:$tag to public"
              else
                log "Failed to set $package_name:$tag to public after multiple attempts"
              fi
            done

            log "Finished processing all packages"
          }

          set_package_visibility_to_public
