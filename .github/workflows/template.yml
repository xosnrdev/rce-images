name: Batch Builder Template

on:
  workflow_call:
    inputs:
      batch_number:
        description: The batch number for the build batch script
        required: true
        type: string
    secrets:
      GH_TOKEN:
        required: true

env:
  REGISTRY: ghcr.io
  GHCR_URI: ghcr.io/${{ github.repository }}

permissions:
  contents: read
  packages: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Free up disk space
        uses: jlumbroso/free-disk-space@main
        with:
          # this might remove tools that are actually needed,
          # if set to "true" but frees about 6 GB
          tool-cache: true

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up nix
        uses: cachix/install-nix-action@v27
        with:
          nix_path: nixpkgs=channel:nixos-24.05
          github_access_token: ${{ secrets.GH_TOKEN }}

      - name: Nix build
        run: |
          chmod +x ./scripts/build_batch_${{ inputs.batch_number }}.sh
          ./scripts/build_batch_${{ inputs.batch_number }}.sh

      - name: Load images
        run: |
          chmod +x ./load_all.sh
          ./load_all.sh

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GH_TOKEN }}

      - name: Prepare images for metadata
        run: |
          set -e

          images_list=""

          images=$(docker images --format "{{.Repository}}:{{.Tag}}" | grep '^rce/' || true)

          if [[ -z "${images}" ]]; then
            echo "No images found with the 'rce/' prefix."
            exit 1
          fi

          while IFS= read -r image; do
            image=$(echo "${image}" | sed "s/^rce\///")

            if [[ "${image}" == *":latest" ]]; then
              image=$(echo "${image}" | sed "s/:latest$//")
            fi

            formatted_uri="${{ env.GHCR_URI }}-${image}"

            images_list+="${formatted_uri} "

          done <<< "${images}"

          echo "IMAGES_LIST=${images_list}" >> $GITHUB_ENV

      - name: Debug images list
        run: echo "IMAGES_LIST=${{ env.IMAGES_LIST }}"

      - name: Set up metadata for images
        id: metadata
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGES_LIST }}
          flavor: |
            latest=true
          tags: |
            type=edge
            type=sha

      - name: Tag images
        run: |
          set -e

          images=$(docker images --format "{{.Repository}}:{{.Tag}}" | grep '^rce/' || true)

          tags="${{ steps.metadata.outputs.tags }}"
          tags_list=$(echo "${tags}" | tr '\n' ' ' | tr -d '\r')

          for image in ${images}; do
            for tag in ${tags_list}; do
              echo "Tagging ${image} with ${tag}..."
              docker tag "${image}" "${tag}"
            done
          done

          echo "TAGS_LIST=${tags_list}" >> $GITHUB_ENV

      - name: Push images
        run: |
          set -e

          for image in ${{ env.TAGS_LIST }}; do
            echo "Pushing ${image}..."
            docker push "${image}"
          done

      - name: Make images public
        run: |
          set -e

          if [ -z "${{ env.TAGS_LIST }}" ]; then
            echo "No images to make public."
            exit 1
          fi

          for image in ${{ env.TAGS_LIST }}; do
            echo "Making ${image} public..."
            repo=$(echo "${image}" | cut -d: -f1 | sed "s|ghcr.io/||")
            tag=$(echo "${image}" | cut -d: -f2)

            api_url="https://api.github.com/user/packages/container/${repo}/versions/${tag}/visibility"

            curl -X PATCH \
              -H "Accept: application/vnd.github.v3+json" \
              -H "Authorization: token ${{ secrets.GH_TOKEN }}" \
              "${api_url}" \
              -d '{"visibility":"public"}'
          done

      - name: Connect images to repository package
        run: |
          set -e

          for image in ${{ env.TAGS_LIST }}; do
            echo "Connecting ${image} to repository package..."
            repo=$(basename "${image}" | cut -d: -f1)

            curl -X POST \
              -H "Accept: application/vnd.github.v3+json" \
              -H "Authorization: token ${{ secrets.GH_TOKEN }}" \
              "https://api.github.com/user/packages/container/${repo}/relationships" \
              -d "{\"repository\": \"${{ github.repository }}\"}"
          done
