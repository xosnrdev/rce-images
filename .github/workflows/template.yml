name: Batch Builder Template

on:
  workflow_call:
    inputs:
      batch_number:
        description: The batch number for the build batch script
        required: true
        type: string
    secrets:
      GH_TOKEN:
        required: true

env:
  REGISTRY: ghcr.io
  GHCR_URI: ghcr.io/${{ github.repository }}

permissions:
  contents: read
  packages: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Free up disk space
        uses: jlumbroso/free-disk-space@main
        with:
          # this might remove tools that are actually needed,
          # if set to "true" but frees about 6 GB
          tool-cache: true

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up nix
        uses: cachix/install-nix-action@v27
        with:
          nix_path: nixpkgs=channel:nixos-24.05
          github_access_token: ${{ secrets.GH_TOKEN }}

      - name: Nix build
        run: |
          chmod +x ./scripts/build_batch_${{ inputs.batch_number }}.sh
          ./scripts/build_batch_${{ inputs.batch_number }}.sh

      - name: Load images
        run: |
          chmod +x ./load_all.sh
          ./load_all.sh

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GH_TOKEN }}

      - name: Set images for metadata
        run: |
          set -e

          images_list=""

          images=$(docker images --format "{{.Repository}}:{{.Tag}}" | grep '^rce/' || true)

          if [[ -z "${images}" ]]; then
            echo "No images found with the 'rce/' prefix."
            exit 1
          fi

          while IFS= read -r image; do
            image=$(echo "${image}" | sed "s/^rce\///")

            if [[ "${image}" == *":latest" ]]; then
              image=$(echo "${image}" | sed "s/:latest$//")
            fi

            formatted_uri="${{ env.GHCR_URI }}-${image}"

            images_list+="${formatted_uri} "

          done <<< "${images}"

          echo "IMAGES_LIST=${images_list}" >> $GITHUB_ENV

      - name: Set up metadata for images
        id: metadata
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGES_LIST }}
          flavor: |
            latest=true
          tags: |
            type=edge
            type=sha

      - name: Tag and Push Images Concurrently
        run: |
          set -e

          images=$(docker images --format "{{.Repository}}:{{.Tag}}" | grep '^rce/' || true)
          tags="${{ steps.metadata.outputs.tags }}"
          tags_list=$(echo "${tags}" | tr '\n' ' ' | tr -d '\r')

          pushed_images=""

          push_image() {
            local image=$1
            local tags=$2
            local pushed_tags=""
            for tag in ${tags}; do
              echo "Tagging and pushing ${image} with ${tag}..."
              docker tag "${image}" "${tag}"
              docker push "${tag}"
              pushed_tags+="${tag} "
            done
            echo "${pushed_tags}"
          }

          for image in ${images}; do
            pushed_tags=$(push_image "${image}" "${tags_list}")
            pushed_images+="${pushed_tags}"
          done

          pushed_images=$(echo "${pushed_images}" | xargs)
          echo "PUSHED_IMAGES=${pushed_images}" >> $GITHUB_ENV

          echo "All images have been pushed. Pushed images: ${pushed_images}"

      - name: Set Package Visibility to Public
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          set -e

          get_package_version_id() {
            local package_name=$1
            local tag=$2
            gh api \
              -H "Accept: application/vnd.github+json" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              "/user/packages/container/${package_name}/versions" \
              --jq ".[] | select(.metadata.container.tags[] | contains(\"${tag}\")) | .id"
          }

          set_package_public() {
            local package_name=$1
            local version_id=$2
            gh api \
              --method PATCH \
              -H "Accept: application/vnd.github+json" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              "/user/packages/container/${package_name}/versions/${version_id}" \
              -f visibility='public'
          }

          IFS=' ' read -ra pushed_images <<< "${{ env.PUSHED_IMAGES }}"
          for image in "${pushed_images[@]}"; do
            image_name=$(echo "${image}" | cut -d':' -f1 | sed "s|^${REGISTRY}/||")
            tag=$(echo "${image}" | cut -d':' -f2)
            
            echo "Processing ${image_name}:${tag}"
            
            package_name=$(echo "${image_name}" | cut -d'/' -f2-)
            version_id=$(get_package_version_id "${package_name}" "${tag}")
            
            if [ -n "${version_id}" ]; then
              echo "Setting ${package_name}:${tag} (ID: ${version_id}) to public"
              set_package_public "${package_name}" "${version_id}"
            else
              echo "Could not find version ID for ${package_name}:${tag}"
            fi
          done

          echo "All packages have been set to public."
